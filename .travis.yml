language: elixir

dist: trusty
sudo: required

services:
  - docker

otp_release: '21.3'

elixir: '1.8'

jobs:
  include:
    - &test
      stage: test
      script: mix test
      before_script:
        - docker-compose up -d
        - ./test/docker/health-check-services.sh
      env:
        - CASSANDRA_VERSION=3
        - CASSANDRA_NATIVE_PROTOCOL=v3

    - <<: *test
      elixir: '1.6'
      otp_release: '19.3'
      env: CASSANDRA_VERSION=3

    - <<: *test
      env: CASSANDRA_VERSION=2.2

    - <<: *test
      env:
        - CASSANDRA_VERSION=3
        - CASSANDRA_NATIVE_PROTOCOL=v4

    - &test-scylla
      stage: test scylla
      script: mix test.scylladb
      before_script:
        - docker-compose --file docker-compose.scylladb.yml up -d
        - ./test/docker/health-check-services.sh
      env: SCYLLA_VERSION=2.3.0

    - <<: *test-scylla
      elixir: '1.6'
      otp_release: '19.3'
      env: SCYLLA_VERSION=2.3.0

    - <<: *test-scylla
      env:
        - SCYLLA_VERSION=2.3.0
        - CASSANDRA_NATIVE_PROTOCOL=v4

    - <<: *test-scylla
      env: SCYLLA_VERSION=2.0.0

    - test-cosmos:
      stage: test cosmos
      os: windows
      language: shell
      install:
        - choco install --no-progress -y elixir --version 1.10.3
        - curl -Lso cosmosdb-emulator-install.msi https://aka.ms/cosmosdb-emulator
        - msiexec /i cosmosdb-emulator-install.msi /quiet /qn /norestart
        - mix deps.get
        - mix deps.compile
      before_script:
        - powershell test/windows/cosmosdb-start-wait.ps1
      script: mix test.cosmosdb
      after_script:
        - powershell test/windows/cosmosdb-stop-wait.ps1
      env:
        - CASSANDRA_IS_COSMOSDB=true
        - CASSANDRA_NATIVE_PROTOCOL=v4

    - stage: check formatted
      script: mix format --check-formatted
      before_install: skip
      sudo: false
      env: null

stages:
  - check formatted
  - test
  - test scylla
  - test cosmos
